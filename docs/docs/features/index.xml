<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>New Features on Java Data</title>
    <link>http://sebfisch.github.io/java-data/docs/features/</link>
    <description>Recent content in New Features on Java Data</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language><atom:link href="http://sebfisch.github.io/java-data/docs/features/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Sealed Classes</title>
      <link>http://sebfisch.github.io/java-data/docs/features/sealed/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://sebfisch.github.io/java-data/docs/features/sealed/</guid>
      <description>Sealed Classes #  Sealed Classes are motivated by the desire to define sum types where the class hierarchy is fixed and not intended to be extended by others. Using the new keywords1 sealed and permits classes (and interfaces) can restrict which other classes can extend (or implement) them.
Sealed classes provide a middle ground between normal classes, which can be extended without restrictions, and final classes, which cannot be extended at all.</description>
    </item>
    
    <item>
      <title>Records</title>
      <link>http://sebfisch.github.io/java-data/docs/features/records/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://sebfisch.github.io/java-data/docs/features/records/</guid>
      <description>Records #  Records are motivated by the desire to implement product types more consisely than is otherwise possible. They are equivalent to final classes without an extends clause (their direct super-class is always Record) and where all fields are private and final. Record definitions automatically provide canonical constructors, field declarations, and corresponding methods for read access. They also provide sensible implementations for the equals, hashCode, and toString methods.
Another feature introduced together with records are local definitions for records, enums or interfaces, which we discuss below.</description>
    </item>
    
    <item>
      <title>Pattern Matching for instanceof</title>
      <link>http://sebfisch.github.io/java-data/docs/features/instanceof/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://sebfisch.github.io/java-data/docs/features/instanceof/</guid>
      <description>Pattern Matching for instanceof #  Pattern Matching for instanceof helps to avoid type casts when we know that they succeed.
Matching optional values #  For example, we can use this feature to simplify the definition of map for optional values.
default &amp;lt;U&amp;gt; Optional&amp;lt;U&amp;gt; map(Function&amp;lt;T, U&amp;gt; fun) { if (this instanceof Present&amp;lt;T&amp;gt; self) { return new Present&amp;lt;&amp;gt;(fun.apply(self.value)); } return new Empty&amp;lt;&amp;gt;(); } Here, the condition using instanceof introduces a variable self of type Optional.</description>
    </item>
    
    <item>
      <title>Switch Expressions</title>
      <link>http://sebfisch.github.io/java-data/docs/features/switch/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://sebfisch.github.io/java-data/docs/features/switch/</guid>
      <description>Switch Expressions #  Switch Expressions expand the ways switch can be used in Java. It is now possible to use the switch construct as an expression (that has a value) instead of using it as a statement (that has an effect.)
Switch expressions are introduced together with arrow labels, which is an independent feature for alternative control flow. Unlike the traditional fall-through behavior, switch constructs with arrow labels execute only one of their cases.</description>
    </item>
    
    <item>
      <title>Pattern Matching for switch</title>
      <link>http://sebfisch.github.io/java-data/docs/features/switchpatterns/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://sebfisch.github.io/java-data/docs/features/switchpatterns/</guid>
      <description>Pattern Matching for switch #  Pattern matching for switch significantly expands the types of values that can be inspected in a switch construct and the ways in which they can be inspected.
Traditionally, switch statements can only inspect
 primitive integral numbers, their boxed versions, strings, or enum values,  and inspecting null always leads to a NullPointerException. Now, arbitrary reference types can be inspected using type patterns and null checks can be incorporated into switch constructs.</description>
    </item>
    
    <item>
      <title>Record Patterns</title>
      <link>http://sebfisch.github.io/java-data/docs/features/recordpatterns/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://sebfisch.github.io/java-data/docs/features/recordpatterns/</guid>
      <description>Record Patterns #  Record Patterns represent an important aspect of pattern matching discussed in the background section: deconstructing product types.
With appropriate definitions for three-argument functions min and max, we can implement a saturation method for RGBColor values as follows.
public double saturation() { return switch (this) { case RGBColor(var r, var g, var b) when max(r, g, b) == 0 -&amp;gt; 0; case RGBColor(var r, var g, var b) -&amp;gt; (max(r, g, b) - min(r, g, b)) / max(r, g, b); default -&amp;gt; throw new IllegalStateException(&amp;#34;unreachable&amp;#34;); }; } In this definition, RGBColor(var r, var g, var b) is a record pattern introducing pattern variables r, g, and b which are bound to the values of the corresponding record fields red, green, and blue of the matched RGBColor value.</description>
    </item>
    
  </channel>
</rss>
